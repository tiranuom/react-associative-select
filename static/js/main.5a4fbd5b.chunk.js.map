{"version":3,"sources":["ExampleWrapper.tsx","../../src/index.tsx","../../src/EnumProvider.tsx","../../src/NumberProvider.tsx","../../src/IntegerProvider.tsx","../../src/StringProvider.tsx","../../src/BooleanProvider.ts","examples/BasicExample.tsx","examples/AsyncOptionFetchingExample.tsx","examples/MultiValueSupportExample.tsx","examples/ArbitrayValueExample.tsx","App.tsx","index.tsx"],"names":["ExampleWrapper","title","description","code","children","useState","open","setOpen","className","onClick","icon","faCode","Collapse","in","language","id","baseOptions","schema","Object","value","label","base","globalTypeProviders","matches","property","toOptions","a","isValidNewOption","fromValue","number","console","isNaN","inputValue","RegExp","findTypeProvider","typeProviders","provider","AssociativeSelect","onChange","optionMapping","props","currentValue","setValue","options","setOptions","useEffect","k","v","typeProvider","result","i","key","loadOptions","useCallback","last","e","isMulti","isClearable","index","defaultOptions","onInputChange","allowCreateWhileLoading","action","Date","components","MultiValueRemove","React","styles","multiValue","multiValueApplied","state","borderRadius","margin","marginRight","backgroundColor","borderStyle","borderWidth","borderColor","borderLeftWidth","borderBottomLeftRadius","borderTopLeftRadius","marginLeft","paddingRight","borderBottomRightRadius","borderTopRightRadius","borderRightWidth","onCreateOption","formatCreateLabel","type","properties","pattern","minimum","maximum","multipleOf","enum","BasicExample","values","log","basicUsageDescription","AsyncOptionFetchingExample","currencyCode","text","Promise","resolve","setTimeout","filter","toLowerCase","startsWith","asyncOptionFetchingUsageDescription","items","MultiValueSupportExample","multiValueSupportUsageDescription","additionalItems","ArbitraryValueExample","arbitraryValueUsageDescription","App","href","currentClassName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a4fbd5b.chunk.js","sourcesContent":["import React, {PropsWithChildren, ReactChild, useState} from \"react\";\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport {Collapse} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCode} from \"@fortawesome/free-solid-svg-icons/faCode\";\n\nexport interface ExampleWrapperProps {\n  title: string\n  description: string | ReactChild\n  code: string\n}\n\nexport function ExampleWrapper({title, description, code, children}: PropsWithChildren<ExampleWrapperProps>) {\n\n  const [open, setOpen] = useState(false);\n\n  return <div className={\"mt-5\"}>\n    <div className={\"row d-flex justify-content-between\"}>\n      <h5 className={\"col-10\"}>{title}</h5>\n      <a className={'btn btn-light col-1'} onClick={() => setOpen(!open)}>\n        <FontAwesomeIcon icon={faCode}/>\n      </a>\n    </div>\n    <p>{description}</p>\n    <Collapse in={open}>\n      <div>\n        <SyntaxHighlighter language={'typescript'} id={'code'}>\n          {code}\n        </SyntaxHighlighter>\n      </div>\n    </Collapse>\n    {children}\n  </div>\n}\n","import React, { useCallback, useEffect, useState } from 'react'\nimport CreatableSelect, { Props } from 'react-select/creatable'\nimport { ActionMeta, components } from 'react-select'\nimport { OptionsType } from 'react-select/src/types'\nimport { JSONSchema7 } from 'json-schema'\nimport { OptionType as _OptionType, TypeProvider } from './types'\nimport { enumTypeProvider } from './EnumProvider'\nimport { numberTypeProvider } from './NumberProvider'\nimport { stringTypeProvider } from './StringProvider'\nimport { booleanTypeProvider } from './BooleanProvider'\nimport {integerTypeProvider} from \"./IntegerProvider\";\n\nexport type OptionType<T> = _OptionType<T>\n\nfunction baseOptions(schema: JSONSchema7): OptionType<string>[] {\n  if (schema.properties) {\n    return Object.entries(schema.properties).map(\n      ([key, value]: [string, JSONSchema7 | boolean]) => ({\n        value: key,\n        label: (value as JSONSchema7).title ?? '',\n        base: true\n      })\n    )\n  } else return []\n}\n\nconst globalTypeProviders: TypeProvider[] = [\n  enumTypeProvider,\n  numberTypeProvider,\n  integerTypeProvider,\n  stringTypeProvider,\n  booleanTypeProvider\n]\n\nfunction findTypeProvider(\n  property: JSONSchema7,\n  typeProviders?: TypeProvider[]\n): TypeProvider | undefined {\n  return [...(typeProviders ?? []), ...globalTypeProviders].find((provider) =>\n    provider.matches(property)\n  )\n}\n\nexport type OptionsProvider<T> = {\n  [K in keyof Partial<T>]: (\n    inputString?: string\n  ) => T[K] extends Array<infer E>\n    ? Promise<OptionsType<OptionType<E>>>\n    : Promise<OptionsType<OptionType<T[K]>>>\n}\n\ninterface AssociativeSelectProps<T>\n  extends Omit<\n    Props<OptionType<T>, any>,\n    | 'isMulti'\n    | 'isClearable'\n    | 'value'\n    | 'options'\n    | 'onChange'\n    | 'isValidNewOption'\n    | 'onCreateOption'\n  > {\n  schema: JSONSchema7\n  value?: Partial<T>\n  onChange?: (value: Partial<T>) => void\n  typeProviders?: TypeProvider[]\n  optionMapping?: OptionsProvider<T>\n}\n\nexport function AssociativeSelect<T>({\n  schema,\n  onChange,\n  value,\n  typeProviders,\n  optionMapping,\n  ...props\n}: AssociativeSelectProps<T>) {\n  const [currentValue, setValue] = useState<OptionsType<OptionType<unknown>>>(\n    []\n  )\n  const [options, setOptions] = useState<OptionsType<OptionType<unknown>>>([])\n\n  useEffect(() => {\n    setOptions(baseOptions(schema))\n  }, [])\n\n  useEffect(() => {\n    let result: OptionsType<OptionType<unknown>> = []\n    Object.entries(value ?? {}).forEach(([k, v]: [string, any]) => {\n      if (!schema.properties) return\n\n      const property = schema.properties[k] as JSONSchema7 | undefined\n      if (property) {\n        const typeProvider = findTypeProvider(property, typeProviders)\n        if (typeProvider) {\n          const valueOption = typeProvider.fromValue(v, property)\n          result = [\n            ...result,\n            { label: property.title ?? '', value: k },\n            ...(valueOption ? [valueOption] : [])\n          ]\n        }\n      }\n    })\n  }, [value])\n\n  useEffect(() => {\n    if (onChange) {\n      const result: any = {}\n      for (let i = 0; i < currentValue.length; i += 2) {\n        if (currentValue[i + 1]) {\n          const key = (currentValue[i].value as string).split(':')[0] as keyof T\n          if (\n            schema.properties &&\n            (schema.properties[key as string] as any)?.type === 'array'\n          ) {\n            result[key] = result[key] ?? []\n            result[key].push(currentValue[i + 1].value as any)\n          } else {\n            result[key] = currentValue[i + 1].value as any\n          }\n        }\n      }\n      onChange(result)\n    }\n  }, [currentValue])\n\n  useEffect(() => {\n    loadOptions(undefined)\n  }, [currentValue])\n\n  const isValidNewOption = useCallback<(inputValue: string) => boolean>(\n    (inputValue) => {\n      if (!schema.properties) return false\n      if (currentValue.length % 2 === 0) {\n        return false\n      }\n\n      const last = currentValue[currentValue.length - 1] as OptionType<string>\n\n      const property: JSONSchema7 = schema.properties[\n        last.value.split(':')[0]\n      ] as JSONSchema7\n\n      if (property.additionalItems === false) return false\n\n      const typeProvider = findTypeProvider(property, typeProviders)\n\n      if (typeProvider) {\n        return typeProvider.isValidNewOption(property, inputValue)\n      }\n      return true\n    },\n    [currentValue]\n  )\n\n  const loadOptions = useCallback<(inputValue?: string) => void>(\n    (inputValue) => {\n      setOptions([])\n      setValue((currentValue) => {\n        setOptions((options) => {\n          if (currentValue.length % 2 === 0) {\n            return baseOptions(schema)\n          } else {\n            const key = ((currentValue[currentValue.length - 1] as OptionType<\n              keyof T\n            >).value as string).split(':')[0] as keyof T\n\n            if (!!optionMapping && optionMapping[key]) {\n              ;(optionMapping[key](inputValue) as any).then((a: any) => {\n                setValue((currentValue) => {\n                  const newKey = ((currentValue[\n                    currentValue.length - 1\n                  ] as OptionType<keyof T>).value as string).split(\n                    ':'\n                  )[0] as keyof T\n                  if (newKey === key) {\n                    setOptions(a)\n                  }\n                  return currentValue\n                })\n              })\n            } else if (\n              schema.properties &&\n              !!schema.properties[key as string] &&\n              !!(schema.properties[key as string] as JSONSchema7).enum\n            ) {\n              const _enum =\n                (schema.properties[key as string] as JSONSchema7).enum ?? []\n              return _enum.map((e) => ({ label: e + '', value: e + '' }))\n            }\n          }\n          return options.filter((a) =>\n            a.label.toLowerCase().startsWith(inputValue ?? '')\n          )\n        })\n        return currentValue\n      })\n    },\n    []\n  )\n\n  return (\n    <CreatableSelect\n      {...props}\n      isMulti\n      isClearable\n      value={currentValue.map((a, index) => ({ ...a, index }))}\n      options={options as any}\n      defaultOptions={options as any}\n      onInputChange={loadOptions}\n      allowCreateWhileLoading={false}\n      onChange={(\n        value: OptionsType<OptionType<unknown>>,\n        action: ActionMeta<any>\n      ) => {\n        if (\n          (action.action === 'remove-value' || action.action === 'pop-value') &&\n          action.removedValue?.index % 2 !== 0\n        ) {\n          const index = action.removedValue?.index\n          setValue([...value.filter((a) => a?.index !== index - 1)])\n        } else if (action.action === 'clear') {\n          setValue(value)\n        } else {\n          setValue(\n            value.map((a, i) => {\n              if (\n                i % 2 === 0 &&\n                schema.properties &&\n                (schema.properties[a.value as string] as JSONSchema7)?.type ===\n                  'array'\n              ) {\n                return { ...a, value: `${a.value}:${Date.now()}` }\n              } else return a\n            })\n          )\n        }\n      }}\n      components={{\n        MultiValueRemove: (props) => {\n          return props.data.index % 2 === 0 ? null : (\n            <components.MultiValueRemove {...props} />\n          )\n        },\n        ...props.components\n      }}\n      styles={{\n        ...props.styles,\n        multiValue(base, state) {\n          const multiValue = props.styles?.multiValue\n          let multiValueApplied\n          if (multiValue) {\n            multiValueApplied = multiValue(base, state)\n          } else {\n            multiValueApplied = undefined\n          }\n\n          const value = state.getValue()\n          const last = value[value.length - 1]\n          if (state.data.index % 2 !== 0) {\n            return {\n              ...base,\n              ...multiValueApplied,\n              borderRadius: multiValueApplied?.borderRadius ?? 0,\n              margin: multiValueApplied?.margin ?? 0,\n              marginRight: multiValueApplied?.marginRight ?? 5,\n              backgroundColor: multiValueApplied?.backgroundColor ?? '#f5f5f5',\n              borderStyle: multiValueApplied?.borderStyle ?? 'solid',\n              borderWidth: multiValueApplied?.borderWidth ?? 1,\n              borderColor: multiValueApplied?.borderColor ?? '#b3b3b3',\n              borderLeftWidth: multiValueApplied?.borderLeftWidth ?? 0,\n              borderBottomLeftRadius: 0,\n              borderTopLeftRadius: 0\n            }\n          } else {\n            return {\n              ...base,\n              ...multiValueApplied,\n              borderRadius: multiValueApplied?.borderRadius ?? 0,\n              margin: multiValueApplied?.margin ?? 0,\n              marginLeft: multiValueApplied?.marginLeft ?? 5,\n              backgroundColor: multiValueApplied?.backgroundColor ?? '#dbdbdb',\n              borderStyle: multiValueApplied?.borderStyle ?? 'solid',\n              borderWidth: multiValueApplied?.borderWidth ?? 1,\n              borderColor: multiValueApplied?.borderColor ?? '#b3b3b3',\n              paddingRight: multiValueApplied?.paddingRight ?? 5,\n              borderBottomRightRadius: 0,\n              borderTopRightRadius: 0,\n              ...(last.label === state.data.label\n                ? {}\n                : {\n                    borderRightWidth: multiValueApplied?.borderRightWidth ?? 0\n                  })\n            }\n          }\n        }\n      }}\n      isValidNewOption={isValidNewOption}\n      onCreateOption={(inputValue) =>\n        setValue((currentValue) => [\n          ...currentValue,\n          { label: inputValue, value: inputValue }\n        ])\n      }\n      formatCreateLabel={(v) => <div>{v}</div>}\n    />\n  )\n}\n","import { OptionType, TypeProvider } from './types'\nimport { JSONSchema7 } from 'json-schema'\nimport { OptionsType } from 'react-select/src/types'\n\nfunction matches(property: JSONSchema7): boolean {\n  return !!property.enum\n}\n\nfunction toOptions(property: JSONSchema7): OptionsType<OptionType<unknown>> {\n  return (\n    property.enum?.map((a) => ({\n      label: a?.toString() ?? '',\n      value: a\n    })) ?? []\n  )\n}\n\nfunction isValidNewOption(): boolean {\n  return false\n}\n\nfunction fromValue(\n  value: any,\n  property: JSONSchema7\n): OptionType<unknown> | undefined {\n  if (property.enum?.includes(value)) {\n    return { label: value.toString(), value: value }\n  } else return undefined\n}\n\nexport const enumTypeProvider: TypeProvider = {\n  matches,\n  toOptions,\n  isValidNewOption,\n  fromValue\n}\n","import { OptionType, TypeProvider } from './types'\nimport { JSONSchema7 } from 'json-schema'\nimport { OptionsType } from 'react-select/src/types'\n\nfunction matches(property: JSONSchema7): boolean {\n  return property.type === 'number'\n}\n\nfunction toOptions(): OptionsType<OptionType<unknown>> {\n  return []\n}\n\nfunction isValidNewOption(property: JSONSchema7, inputValue: string): boolean {\n  const number = +inputValue\n  console.log(number)\n  if (isNaN(number)) return false\n  if (property.maximum && number > property.maximum) return false\n  if (property.multipleOf && number % property.multipleOf !== 0) return false\n  return !(property.minimum && number < property.minimum)\n}\n\nfunction fromValue(value: any): OptionType<unknown> | undefined {\n  return { label: value.toString(), value: value }\n}\n\nexport const numberTypeProvider: TypeProvider = {\n  matches,\n  toOptions,\n  isValidNewOption,\n  fromValue\n}\n","import { OptionType, TypeProvider } from './types'\nimport { JSONSchema7 } from 'json-schema'\nimport { OptionsType } from 'react-select/src/types'\n\nfunction matches(property: JSONSchema7): boolean {\n  return property.type === 'integer'\n}\n\nfunction toOptions(): OptionsType<OptionType<unknown>> {\n  return []\n}\n\nfunction isValidNewOption(property: JSONSchema7, inputValue: string): boolean {\n  const number = +inputValue\n  console.log(number)\n  if (isNaN(number)) return false\n  if (property.maximum && number > property.maximum) return false\n  property.multipleOf = property.multipleOf || 1\n  if (number % property.multipleOf !== 0) return false\n  return !(property.minimum && number < property.minimum)\n}\n\nfunction fromValue(value: any): OptionType<unknown> | undefined {\n  return { label: value.toString(), value: value }\n}\n\nexport const integerTypeProvider: TypeProvider = {\n  matches,\n  toOptions,\n  isValidNewOption,\n  fromValue\n}\n","import { OptionType, TypeProvider } from './types'\nimport { JSONSchema7 } from 'json-schema'\nimport { OptionsType } from 'react-select/src/types'\n\nfunction matches(property: JSONSchema7): boolean {\n  return property.type === 'string'\n}\n\nfunction toOptions(): OptionsType<OptionType<unknown>> {\n  return []\n}\n\nfunction isValidNewOption(property: JSONSchema7, inputValue: string): boolean {\n  if (property.minLength && inputValue.length < property.minLength) return false\n  if (property.maxLength && inputValue.length > property.maxLength) return false\n  if (property.pattern && !new RegExp(property.pattern).test(inputValue))\n    return false\n  return true\n}\n\nfunction fromValue(value: any): OptionType<unknown> | undefined {\n  return { label: value.toString(), value: value }\n}\n\nexport const stringTypeProvider: TypeProvider = {\n  matches,\n  toOptions,\n  isValidNewOption,\n  fromValue\n}\n","import { OptionType, TypeProvider } from './types'\nimport { JSONSchema7 } from 'json-schema'\nimport { OptionsType } from 'react-select/src/types'\n\nfunction matches(property: JSONSchema7): boolean {\n  return property.type === 'boolean'\n}\n\nfunction toOptions(): OptionsType<OptionType<unknown>> {\n  return [\n    { label: 'True', value: true },\n    { label: 'False', value: false }\n  ]\n}\n\nfunction isValidNewOption(): boolean {\n  return false\n}\n\nfunction fromValue(\n  value: any,\n  property: JSONSchema7\n): OptionType<unknown> | undefined {\n  if (property.enum?.includes(value)) {\n    return { label: value.toString(), value: value }\n  } else return undefined\n}\n\nexport const booleanTypeProvider: TypeProvider = {\n  matches,\n  toOptions,\n  isValidNewOption,\n  fromValue\n}\n","import React from 'react'\n\nimport { AssociativeSelect } from 'react-associative-select'\nimport {JSONSchema7} from \"json-schema\";\n\ninterface Person {\n  name: string\n  age: number\n  gender: \"Male\" | \"Female\"\n}\n\nconst schema: JSONSchema7 = {\n  type: \"object\",\n  title: \"\",\n  properties: {\n    \"name\": { type: \"string\", title: \"Name\", pattern: '^[a-zA-Z ]+$' },\n    \"age\": { type: \"number\", title: \"Age\", minimum: 18, maximum: 60, multipleOf: 1 },\n    \"gender\": { type: \"string\", title: \"Gender\", enum: [\"Male\", \"Female\"] }\n  }\n}\n\nexport default function BasicExample() {\n\n  function onChange(values: Partial<Person>) {\n    console.log(values)\n  }\n\n  return <AssociativeSelect\n    schema={schema}\n    value={{}}\n    onChange={onChange}\n    styles={{\n      multiValue() {\n        return {\n          borderRadius: 10\n        }\n      }\n    }}\n  />\n}\n\nexport const basicUsageDescription = <>\n  <p>Basic usage is simple as defining the schema and adding the <code>AssociativeSelect</code> component with callback.</p>\n</>\n\nexport const basicExampleCode = `\nimport React from 'react'\n\nimport { AssociativeSelect } from 'react-associative-select'\nimport {JSONSchema7} from \"json-schema\";\n\ninterface Person {\n  name: string\n  age: number\n  gender: \"Male\" | \"Female\"\n}\n\nconst schema: JSONSchema7 = {\n  type: \"object\",\n  title: \"\",\n  properties: {\n    \"name\": { type: \"string\", title: \"Name\", pattern: '^[a-zA-Z ]+$' },\n    \"age\": { type: \"number\", title: \"Age\", minimum: 18, maximum: 60, multipleOf: 1 },\n    \"gender\": { type: \"string\", title: \"Gender\", enum: [\"Male\", \"Female\"] }\n  }\n}\n\nexport default function BasicExample() {\n\n  function onChange(values: Partial<Person>) {\n    console.log(values)\n  }\n\n  return <AssociativeSelect\n    schema={schema}\n    value={{}}\n    onChange={onChange}\n    styles={{\n      multiValue() {\n        return {\n          borderRadius: 10\n        }\n      }\n    }}\n  />\n}\n`\n","import React from \"react\";\nimport {AssociativeSelect, OptionType} from \"react-associative-select\";\nimport {JSONSchema7} from \"json-schema\";\nimport {OptionsType} from \"react-select\";\n\ninterface CurrencySelection {\n  currencyCode: string\n}\n\nconst schema: JSONSchema7 = {\n  type: \"object\",\n  title: \"\",\n  properties: {\n    \"currencyCode\": {type: \"string\", title: \"Currency\"}\n  }\n}\n\nexport function AsyncOptionFetchingExample() {\n\n  function onQueryChange(e: Partial<CurrencySelection>) {\n    console.log(e)\n  }\n\n  return <div>\n    <AssociativeSelect\n      schema={schema}\n      onChange={onQueryChange}\n      optionMapping={{\n        currencyCode: (text: string | undefined) => new Promise<OptionsType<OptionType<string>>>((resolve) => {\n          setTimeout(() => {\n            let currencies: OptionsType<OptionType<string>> = [{label: \"LKR\", value: \"Rs. \"}, {label: \"USD\", value: \"$\"}, {label: \"EURO\", value: \"€\"}];\n            resolve(currencies.filter(({label}) => !text || label.toLowerCase().startsWith(text.toLowerCase())));\n          }, 1000)\n        })\n      }}\n    />\n  </div>\n}\n\nexport const asyncOptionFetchingExampleCode = `\nimport React from \"react\";\nimport {AssociativeSelect, OptionType} from \"react-associative-select\";\nimport {JSONSchema7} from \"json-schema\";\nimport {OptionsType} from \"react-select\";\n\ninterface CurrencySelection {\n  currencyCode: string\n}\n\nconst schema: JSONSchema7 = {\n  type: \"object\",\n  title: \"\",\n  properties: {\n    \"currencyCode\": {type: \"string\", title: \"Currency\"}\n  }\n}\n\nexport function AsyncOptionFetchingExample() {\n\n  function onQueryChange(e: Partial<CurrencySelection>) {\n    console.log(e)\n  }\n\n  return <div>\n    <AssociativeSelect\n      schema={schema}\n      onChange={onQueryChange}\n      optionMapping={{\n        currencyCode: (text: string | undefined) => new Promise<OptionsType<OptionType<string>>>((resolve) => {\n          setTimeout(() => {\n            let currencies: OptionsType<OptionType<string>> = [{label: \"LKR\", value: \"Rs. \"}, {label: \"USD\", value: \"$\"}, {label: \"EURO\", value: \"€\"}];\n            resolve(currencies.filter(({label}) => !text || label.toLowerCase().startsWith(text.toLowerCase())));\n          }, 1000)\n        })\n      }}\n    />\n  </div>\n}\n`\n\nexport const asyncOptionFetchingUsageDescription = <>\n  <p><code>react-associative-select</code> supports asynchronous data fetching through optionMapping prop.</p>\n\n  <p>\n    The option mapping is a key-value pair object where the key is a key of schema properties and the value is a function\n    which provides a promise of results. The result is in <code>{`{label: string, value: T}`}</code> shape.\n  </p>\n</>\n\n","import React from \"react\";\nimport {AssociativeSelect} from \"react-associative-select\";\nimport {JSONSchema7} from \"json-schema\";\n\ninterface CurrencySelection {\n  supportedCurrencies: string[]\n}\n\nconst schema: JSONSchema7 = {\n  type: \"object\",\n  title: \"\",\n  properties: {\n    \"supportedCurrencies\": {type: \"array\", title: \"Currency\", items: {type: \"string\"}, enum: [\"USD\", \"LKR\", \"EURO\"]}\n  }\n}\n\nexport function MultiValueSupportExample() {\n\n  function onQueryChange(e: Partial<CurrencySelection>) {\n    console.log(e)\n  }\n\n  return <div>\n    <AssociativeSelect\n      schema={schema}\n      onChange={onQueryChange}\n    />\n  </div>\n}\n\nexport const multiValueSupportExampleCode = `\nimport React from \"react\";\nimport {AssociativeSelect} from \"react-associative-select\";\nimport {JSONSchema7} from \"json-schema\";\n\ninterface CurrencySelection {\n  supportedCurrencies: string[]\n}\n\nconst schema: JSONSchema7 = {\n  type: \"object\",\n  title: \"\",\n  properties: {\n    \"supportedCurrencies\": {type: \"array\", title: \"Currency\", items: {type: \"string\"}, enum: [\"USD\", \"LKR\", \"EURO\"]}\n  }\n}\n\nexport function MultiValueSupport() {\n\n  function onQueryChange(e: Partial<CurrencySelection>) {\n    console.log(e)\n  }\n\n  return <div>\n    <AssociativeSelect\n      schema={schema}\n      onChange={onQueryChange}\n    />\n  </div>\n}\n`\n\nexport const multiValueSupportUsageDescription = <>\n  <p>The properties of type <code>array</code> are automatically converted to multi-value field.</p>\n</>\n\n","import React from \"react\";\nimport {AssociativeSelect, OptionType} from \"react-associative-select\";\nimport {JSONSchema7} from \"json-schema\";\nimport {OptionsType} from \"react-select\";\n\ninterface CurrencySelection {\n  currencyCode: string\n}\n\nconst schema: JSONSchema7 = {\n  type: \"object\",\n  title: \"\",\n  properties: {\n    \"currencyCode\": {type: \"string\", title: \"Currency\", additionalItems: false}\n  }\n}\n\nexport function ArbitraryValueExample() {\n\n  function onQueryChange(e: Partial<CurrencySelection>) {\n    console.log(e)\n  }\n\n  return <div>\n    <AssociativeSelect\n      schema={schema}\n      onChange={onQueryChange}\n      optionMapping={{\n        currencyCode: (text: string | undefined) => new Promise<OptionsType<OptionType<string>>>((resolve) => {\n          setTimeout(() => {\n            let currencies: OptionsType<OptionType<string>> = [{label: \"LKR\", value: \"Rs. \"}, {label: \"USD\", value: \"$\"}, {label: \"EURO\", value: \"€\"}];\n            resolve(currencies.filter(({label}) => !text || label.toLowerCase().startsWith(text.toLowerCase())));\n          }, 1000)\n        })\n      }}\n    />\n  </div>\n}\n\nexport const arbitraryValueExampleCode = `\nimport React from \"react\";\nimport {AssociativeSelect, OptionType} from \"react-associative-select\";\nimport {JSONSchema7} from \"json-schema\";\nimport {OptionsType} from \"react-select\";\n\ninterface CurrencySelection {\n  currencyCode: string\n}\n\nconst schema: JSONSchema7 = {\n  type: \"object\",\n  title: \"\",\n  properties: {\n    \"currencyCode\": {type: \"string\", title: \"Currency\", additionalItems: false}\n  }\n}\n\nexport function ArbitraryValueExample() {\n\n  function onQueryChange(e: Partial<CurrencySelection>) {\n    console.log(e)\n  }\n\n  return <div>\n    <AssociativeSelect\n      schema={schema}\n      onChange={onQueryChange}\n      optionMapping={{\n        currencyCode: (text: string | undefined) => new Promise<OptionsType<OptionType<string>>>((resolve) => {\n          setTimeout(() => {\n            let currencies: OptionsType<OptionType<string>> = [{label: \"LKR\", value: \"Rs. \"}, {label: \"USD\", value: \"$\"}, {label: \"EURO\", value: \"€\"}];\n            resolve(currencies.filter(({label}) => !text || label.toLowerCase().startsWith(text.toLowerCase())));\n          }, 1000)\n        })\n      }}\n    />\n  </div>\n}`\n\nexport const arbitraryValueUsageDescription = <>\n  <p>By default, arbitrary values are supported in the defined fields except for the fields with enum property. This behavior\n    can be changed by using <code>additionalItems</code> json-schema property.</p>\n\n  <p>\n    Arbitrary value support control works well with asynchronous data fetching.\n  </p>\n</>\n\n","import React from 'react'\nimport Scrollspy from 'react-scrollspy'\nimport {ExampleWrapper} from \"./ExampleWrapper\";\nimport BasicExample, {basicExampleCode, basicUsageDescription} from \"./examples/BasicExample\";\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport {\n  AsyncOptionFetchingExample,\n  asyncOptionFetchingExampleCode,\n  asyncOptionFetchingUsageDescription\n} from \"./examples/AsyncOptionFetchingExample\";\nimport {\n  MultiValueSupportExample,\n  multiValueSupportExampleCode,\n  multiValueSupportUsageDescription\n} from \"./examples/MultiValueSupportExample\";\nimport {\n  ArbitraryValueExample,\n  arbitraryValueExampleCode,\n  arbitraryValueUsageDescription\n} from \"./examples/ArbitrayValueExample\";\n\nfunction App() {\n  return <>\n    <nav className={'navbar navbar-expand-lg navbar-light bg-light sticky-top'}>\n      <a className=\"navbar-brand mx-3\" href=\"#\">React associative select</a>\n    </nav>\n    <div className={'container row mt-5 mp-5'}>\n      <div className={'col-md-2 position-fixed'}>\n        <Scrollspy items={[\"basic-usage\"]} currentClassName={\"active\"} className={\"list-group\"}>\n          <a className={'list-group-item list-group-item-action'} href={\"#intro\"}>Introduction</a>\n          <a className={'list-group-item list-group-item-action'} href={\"#basic-usage\"}>Basic Usage</a>\n          <a className={'list-group-item list-group-item-action'} href={\"#async-usage\"}>Async Usage</a>\n          <a className={'list-group-item list-group-item-action'} href={\"#multi-value-support-usage\"}>Multi Value Support</a>\n          <a className={'list-group-item list-group-item-action'} href={\"#arbitrary-value-support-usage\"}>Arbitrary Value Support</a>\n        </Scrollspy>\n      </div>\n      <div className={\"col-md-8 offset-4\"}>\n        <section id={\"intro\"}>\n          <h3>React Associative Select</h3>\n          <p><code>React-associative-search</code> uses <a href={'https://react-select.com'}>React Select</a> under the\n            hood to provide the select functionality.\n            Kudos for the authors of the great tool.</p>\n\n          <p>Furthermore, the library uses `JSONSchema7` schema format to define the shape of search options. Full\n            JSONSchema7 spec\n            is not supported and the project is in active development to support additional features.</p>\n        </section>\n        <section id={\"installation\"}>\n          <h5>Installation</h5>\n          <p>The easiest way to install the react-associative-select is through npm or yarn.</p>\n\n          <SyntaxHighlighter language={'shell'}>\n            $ npm -i react-associative-select\n          </SyntaxHighlighter>\n\n          <p>or</p>\n\n          <SyntaxHighlighter language={'shell'}>\n            $ yarn add react-associative-select\n          </SyntaxHighlighter>\n        </section>\n        <section id={\"basic-usage\"}>\n          <ExampleWrapper title={\"Basic Usage\"} description={basicUsageDescription} code={basicExampleCode}>\n            <BasicExample/>\n          </ExampleWrapper>\n        </section>\n        <section id={\"async-usage\"}>\n          <ExampleWrapper title={\"Asynchronous options fetching\"} description={asyncOptionFetchingUsageDescription} code={asyncOptionFetchingExampleCode}>\n            <AsyncOptionFetchingExample/>\n          </ExampleWrapper>\n        </section>\n        <section id={\"multi-value-support-usage\"}>\n          <ExampleWrapper title={\"Multi Value Support\"} description={multiValueSupportUsageDescription} code={multiValueSupportExampleCode}>\n            <MultiValueSupportExample/>\n          </ExampleWrapper>\n        </section>\n        <section id={\"arbitrary-value-support-usage\"}>\n          <ExampleWrapper title={\"Arbitrary Support\"} description={arbitraryValueUsageDescription} code={arbitraryValueExampleCode}>\n            <ArbitraryValueExample/>\n          </ExampleWrapper>\n        </section>\n      </div>\n    </div>\n  </>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}